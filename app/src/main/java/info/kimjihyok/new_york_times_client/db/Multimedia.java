package info.kimjihyok.new_york_times_client.db;

import info.kimjihyok.new_york_times_client.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MULTIMEDIA".
 */
public class Multimedia {

    private Long id;
    private String url;
    private String format;
    private Integer height;
    private Integer width;
    private String type;
    private String subtype;
    private String caption;
    private String copyright;
    private long post_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MultimediaDao myDao;

    private PostItem postItem;
    private Long postItem__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Multimedia() {
    }

    public Multimedia(Long id) {
        this.id = id;
    }

    public Multimedia(Long id, String url, String format, Integer height, Integer width, String type, String subtype, String caption, String copyright, long post_id) {
        this.id = id;
        this.url = url;
        this.format = format;
        this.height = height;
        this.width = width;
        this.type = type;
        this.subtype = subtype;
        this.caption = caption;
        this.copyright = copyright;
        this.post_id = post_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMultimediaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getFormat() {
        return format;
    }

    public void setFormat(String format) {
        this.format = format;
    }

    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer height) {
        this.height = height;
    }

    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer width) {
        this.width = width;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getSubtype() {
        return subtype;
    }

    public void setSubtype(String subtype) {
        this.subtype = subtype;
    }

    public String getCaption() {
        return caption;
    }

    public void setCaption(String caption) {
        this.caption = caption;
    }

    public String getCopyright() {
        return copyright;
    }

    public void setCopyright(String copyright) {
        this.copyright = copyright;
    }

    public long getPost_id() {
        return post_id;
    }

    public void setPost_id(long post_id) {
        this.post_id = post_id;
    }

    /** To-one relationship, resolved on first access. */
    public PostItem getPostItem() {
        long __key = this.post_id;
        if (postItem__resolvedKey == null || !postItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PostItemDao targetDao = daoSession.getPostItemDao();
            PostItem postItemNew = targetDao.load(__key);
            synchronized (this) {
                postItem = postItemNew;
            	postItem__resolvedKey = __key;
            }
        }
        return postItem;
    }

    public void setPostItem(PostItem postItem) {
        if (postItem == null) {
            throw new DaoException("To-one property 'post_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.postItem = postItem;
            post_id = postItem.getId();
            postItem__resolvedKey = post_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
