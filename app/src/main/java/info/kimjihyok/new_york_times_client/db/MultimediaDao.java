package info.kimjihyok.new_york_times_client.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import info.kimjihyok.new_york_times_client.db.Multimedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MULTIMEDIA".
*/
public class MultimediaDao extends AbstractDao<Multimedia, Void> {

    public static final String TABLENAME = "MULTIMEDIA";

    /**
     * Properties of entity Multimedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", false, "URL");
        public final static Property Format = new Property(1, String.class, "format", false, "FORMAT");
        public final static Property Height = new Property(2, Integer.class, "height", false, "HEIGHT");
        public final static Property Width = new Property(3, Integer.class, "width", false, "WIDTH");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Subtype = new Property(5, String.class, "subtype", false, "SUBTYPE");
        public final static Property Caption = new Property(6, String.class, "caption", false, "CAPTION");
        public final static Property Copyright = new Property(7, String.class, "copyright", false, "COPYRIGHT");
    };


    public MultimediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultimediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MULTIMEDIA\" (" + //
                "\"URL\" TEXT," + // 0: url
                "\"FORMAT\" TEXT," + // 1: format
                "\"HEIGHT\" INTEGER," + // 2: height
                "\"WIDTH\" INTEGER," + // 3: width
                "\"TYPE\" TEXT," + // 4: type
                "\"SUBTYPE\" TEXT," + // 5: subtype
                "\"CAPTION\" TEXT," + // 6: caption
                "\"COPYRIGHT\" TEXT);"); // 7: copyright
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MULTIMEDIA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Multimedia entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(2, format);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(3, height);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(4, width);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindString(6, subtype);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(7, caption);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(8, copyright);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Multimedia readEntity(Cursor cursor, int offset) {
        Multimedia entity = new Multimedia( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // format
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // height
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // width
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subtype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // caption
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // copyright
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Multimedia entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFormat(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeight(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWidth(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSubtype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCaption(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCopyright(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Multimedia entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Multimedia entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
